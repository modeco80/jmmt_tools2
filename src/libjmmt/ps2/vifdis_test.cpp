#include <jmmt/ps2/vif.hpp>

// Sample VIF program
const u8 testPacket[256] = {
	0x00,
	0x00,
	0x00,
	0x30,
	0x2E,
	0xE2,
	0xFD,
	0xFF,
	0x5C,
	0x65,
	0xFF,
	0xFF,
	0x51,
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x01,
	0x00,
	0x00,
	0x05,
	0x23,
	0xC0,
	0x10,
	0x79,
	0x79,
	0xA9,
	0x00,
	0x00,
	0x03,
	0x00,
	0x98,
	0xA9,
	0xFF,
	0x30,
	0x00,
	0x00,
	0x98,
	0xA9,
	0xFE,
	0x61,
	0x00,
	0x00,
	0x79,
	0xA9,
	0xFD,
	0x92,
	0x03,
	0x00,
	0xFC,
	0x70,
	0x00,
	0x00,
	0xE7,
	0x05,
	0xE2,
	0x70,
	0x09,
	0x31,
	0xEA,
	0x05,
	0xE2,
	0x70,
	0xE4,
	0x61,
	0xEA,
	0x05,
	0xFC,
	0x70,
	0x1B,
	0x93,
	0xE7,
	0x05,
	0x7F,
	0x38,
	0x00,
	0x00,
	0x91,
	0x06,
	0x89,
	0x38,
	0x09,
	0x31,
	0x90,
	0x06,
	0x89,
	0x38,
	0xE4,
	0x61,
	0x2E,
	0x06,
	0x7F,
	0x38,
	0x1B,
	0x93,
	0x2F,
	0x06,
	0x00,
	0x00,
	0x00,
	0x00,
	0xC5,
	0x07,
	0x00,
	0x00,
	0xFF,
	0x30,
	0xC5,
	0x07,
	0x00,
	0x00,
	0xFE,
	0x61,
	0xC5,
	0x07,
	0x00,
	0x00,
	0xFD,
	0x92,
	0xC5,
	0x07,
	0x00,
	0x00,
	0x00,
	0x05,
	0x33,
	0x80,
	0x10,
	0x79,
	0xCF,
	0x03,
	0x78,
	0x03,
	0x84,
	0x03,
	0xD0,
	0x03,
	0x78,
	0x03,
	0x84,
	0x03,
	0xD0,
	0x03,
	0x79,
	0x03,
	0x85,
	0x03,
	0xD0,
	0x03,
	0x79,
	0x03,
	0x85,
	0x03,
	0x1C,
	0x03,
	0xDB,
	0x02,
	0x07,
	0x03,
	0x1C,
	0x03,
	0xDC,
	0x02,
	0x08,
	0x03,
	0x16,
	0x03,
	0xD6,
	0x02,
	0x03,
	0x03,
	0x16,
	0x03,
	0xD6,
	0x02,
	0x03,
	0x03,
	0x13,
	0x03,
	0xD5,
	0x02,
	0x03,
	0x03,
	0x16,
	0x03,
	0xD7,
	0x02,
	0x04,
	0x03,
	0x17,
	0x03,
	0xD8,
	0x02,
	0x05,
	0x03,
	0x14,
	0x03,
	0xD6,
	0x02,
	0x04,
	0x03,
	0x17,
	0x03,
	0xD8,
	0x02,
	0x06,
	0x03,
	0x17,
	0x03,
	0xD8,
	0x02,
	0x06,
	0x03,
	0x1A,
	0x03,
	0xDA,
	0x02,
	0x07,
	0x03,
	0x1A,
	0x03,
	0xDA,
	0x02,
	0x07,
	0x03,
	0x43,
	0x80,
	0x05,
	0x75,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x40,
	0x00,
	0xC0,
	0x00,
	0x00,
	0x00,
	0x40,
	0x00,
	0xD0,
	0xCB,
	0x0C,
	0x00,
	0x00,
	0x2A,
	0x00,
	0x00,
	0x14,
};

void hexDump(const void* data, usize size) {
	char ascii[17];
	usize i, j;
	ascii[16] = '\0';
	for(i = 0; i < size; ++i) {
		printf("%02X ", ((unsigned char*)data)[i]);
		if(((unsigned char*)data)[i] >= ' ' && ((unsigned char*)data)[i] <= '~') {
			ascii[i % 16] = ((unsigned char*)data)[i];
		} else {
			ascii[i % 16] = '.';
		}
		if((i + 1) % 8 == 0 || i + 1 == size) {
			printf(" ");
			if((i + 1) % 16 == 0) {
				printf("|  %s \n", ascii);
			} else if(i + 1 == size) {
				ascii[(i + 1) % 16] = '\0';
				if((i + 1) % 16 <= 8) {
					printf(" ");
				}
				for(j = (i + 1) % 16; j < 16; ++j) {
					printf("   ");
				}
				printf("|  %s \n", ascii);
			}
		}
	}
}

int main() {
	jmmt::ps2::vifDisassemble(&testPacket[0], sizeof(testPacket));

	// test the vif emulator
	jmmt::ps2::Vif vif;
	vif.cycle.cl = 0;
	u8 unpackBuffer[512] {};
	vif.execute(&testPacket[0], sizeof(testPacket), &unpackBuffer[0], sizeof(unpackBuffer));

	printf("the dance:\n");
	hexDump(&unpackBuffer[0], sizeof(unpackBuffer));
	return 0;
}
